################################################## 
# PingdomAPI_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# urn:PingdomAPI
##############################

class ns0:
    targetNamespace = "urn:PingdomAPI"

    class Test_EchoResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Test_EchoResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Test_EchoResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="outString", aname="_outString", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._outString = None
                    return
            Holder.__name__ = "Test_EchoResponse_Holder"
            self.pyclass = Holder

    class Auth_CredentialsData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Auth_CredentialsData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Auth_CredentialsData_Def.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "Auth_CredentialsData_Holder"
            self.pyclass = Holder

    class Auth_LoginResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Auth_LoginResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Auth_LoginResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sessionId", aname="_sessionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._sessionId = None
                    return
            Holder.__name__ = "Auth_LoginResponse_Holder"
            self.pyclass = Holder

    class Auth_LogoutResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Auth_LogoutResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Auth_LogoutResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    return
            Holder.__name__ = "Auth_LogoutResponse_Holder"
            self.pyclass = Holder

    class Check_GetListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Check_GetListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Check_GetListResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Check_ListArray",lazy=False)(pname="checkNames", aname="_checkNames", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._checkNames = None
                    return
            Holder.__name__ = "Check_GetListResponse_Holder"
            self.pyclass = Holder

    class Check_ListArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Check_ListArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Check_GetCheckIdsByNamesRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Check_GetCheckIdsByNamesRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Check_GetCheckIdsByNamesRequest_Def.schema
            TClist = [GTD("urn:PingdomAPI","Check_ListArray",lazy=False)(pname="checkNames", aname="_checkNames", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._checkNames = None
                    return
            Holder.__name__ = "Check_GetCheckIdsByNamesRequest_Holder"
            self.pyclass = Holder

    class Check_GetCheckIdsByNamesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Check_GetCheckIdsByNamesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Check_GetCheckIdsByNamesResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Check_CheckIdsArray",lazy=False)(pname="checkIds", aname="_checkIds", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._checkIds = None
                    return
            Holder.__name__ = "Check_GetCheckIdsByNamesResponse_Holder"
            self.pyclass = Holder

    class Check_CheckIdsArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Check_CheckIdsArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TCnumbers.Iint(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'int[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_GetLastDownsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetLastDownsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetLastDownsResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_LastDownsArray",lazy=False)(pname="lastDowns", aname="_lastDowns", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._lastDowns = None
                    return
            Holder.__name__ = "Report_GetLastDownsResponse_Holder"
            self.pyclass = Holder

    class Report_LastDownsArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_LastDownsArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.Report_LastDownEntry_Def(None, typed=False)
            atype = (u'urn:PingdomAPI', u'Report_LastDownEntry[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_LastDownEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_LastDownEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_LastDownEntry_Def.schema
            TClist = [ZSI.TC.String(pname="checkName", aname="_checkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastDown", aname="_lastDown", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._checkName = None
                    self._lastDown = None
                    return
            Holder.__name__ = "Report_LastDownEntry_Holder"
            self.pyclass = Holder

    class Report_GetCurrentStatesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetCurrentStatesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetCurrentStatesResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_CurrentStatesArray",lazy=False)(pname="currentStates", aname="_currentStates", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._currentStates = None
                    return
            Holder.__name__ = "Report_GetCurrentStatesResponse_Holder"
            self.pyclass = Holder

    class Report_CurrentStatesArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_CurrentStatesArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.Report_CheckStateEntry_Def(None, typed=False)
            atype = (u'urn:PingdomAPI', u'Report_CheckStateEntry[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_CheckStateEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_CheckStateEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_CheckStateEntry_Def.schema
            TClist = [ZSI.TC.String(pname="checkName", aname="_checkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_CheckState",lazy=False)(pname="checkState", aname="_checkState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="lastCheckTime", aname="_lastCheckTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._checkName = None
                    self._checkState = None
                    self._lastCheckTime = None
                    return
            Holder.__name__ = "Report_CheckStateEntry_Holder"
            self.pyclass = Holder

    class Report_CheckState_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_CheckState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Report_GetDowntimesRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetDowntimesRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetDowntimesRequest_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="from", aname="_from", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="to", aname="_to", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_ResolutionEnum",lazy=False)(pname="resolution", aname="_resolution", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checkName", aname="_checkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._to = None
                    self._resolution = None
                    self._checkName = None
                    return
            Holder.__name__ = "Report_GetDowntimesRequest_Holder"
            self.pyclass = Holder

    class Report_GetResponseTimesRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetResponseTimesRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetResponseTimesRequest_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="from", aname="_from", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="to", aname="_to", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_ResolutionEnum",lazy=False)(pname="resolution", aname="_resolution", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checkName", aname="_checkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Location_ListArray",lazy=False)(pname="locations", aname="_locations", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._to = None
                    self._resolution = None
                    self._checkName = None
                    self._locations = None
                    return
            Holder.__name__ = "Report_GetResponseTimesRequest_Holder"
            self.pyclass = Holder

    class Report_GetNotificationsRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetNotificationsRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetNotificationsRequest_Def.schema
            TClist = [GTD("urn:PingdomAPI","Report_checkNamesArray",lazy=False)(pname="checkNames", aname="_checkNames", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_contactsArray",lazy=False)(pname="contacts", aname="_contacts", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="from", aname="_from", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="to", aname="_to", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_NotificationStatus",lazy=False)(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_NotificationVia",lazy=False)(pname="via", aname="_via", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="pageNumber", aname="_pageNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="resultsPerPage", aname="_resultsPerPage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._checkNames = None
                    self._contacts = None
                    self._from = None
                    self._to = None
                    self._status = None
                    self._via = None
                    self._pageNumber = None
                    self._resultsPerPage = None
                    return
            Holder.__name__ = "Report_GetNotificationsRequest_Holder"
            self.pyclass = Holder

    class Report_checkNamesArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_checkNamesArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_contactsArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_contactsArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_NotificationStatusItem_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_NotificationStatusItem")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Report_NotificationStatus_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_NotificationStatus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.Report_NotificationStatusItem_Def(None, typed=False)
            atype = (u'urn:PingdomAPI', u'Report_NotificationStatusItem[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_NotificationViaItem_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_NotificationViaItem")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Report_NotificationVia_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_NotificationVia")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.Report_NotificationViaItem_Def(None, typed=False)
            atype = (u'urn:PingdomAPI', u'Report_NotificationViaItem[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_GetOutagesRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetOutagesRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetOutagesRequest_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="from", aname="_from", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="to", aname="_to", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checkName", aname="_checkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="pageNumber", aname="_pageNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="resultsPerPage", aname="_resultsPerPage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._to = None
                    self._checkName = None
                    self._pageNumber = None
                    self._resultsPerPage = None
                    return
            Holder.__name__ = "Report_GetOutagesRequest_Holder"
            self.pyclass = Holder

    class Report_GetRawDataRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetRawDataRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetRawDataRequest_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="from", aname="_from", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="to", aname="_to", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="checkName", aname="_checkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="pageNumber", aname="_pageNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="resultsPerPage", aname="_resultsPerPage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._to = None
                    self._checkName = None
                    self._pageNumber = None
                    self._resultsPerPage = None
                    return
            Holder.__name__ = "Report_GetRawDataRequest_Holder"
            self.pyclass = Holder

    class Report_ResolutionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_ResolutionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Report_GetDowntimesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetDowntimesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetDowntimesResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_DowntimesArray",lazy=False)(pname="downtimesArray", aname="_downtimesArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._downtimesArray = None
                    return
            Holder.__name__ = "Report_GetDowntimesResponse_Holder"
            self.pyclass = Holder

    class Report_DowntimesArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_DowntimesArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.Report_DowntimeEntry_Def(None, typed=False)
            atype = (u'urn:PingdomAPI', u'Report_DowntimeEntry[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_DowntimeEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_DowntimeEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_DowntimeEntry_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="from", aname="_from", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="to", aname="_to", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="duration", aname="_duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._to = None
                    self._duration = None
                    return
            Holder.__name__ = "Report_DowntimeEntry_Holder"
            self.pyclass = Holder

    class Report_GetDowntimesExtendedResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetDowntimesExtendedResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetDowntimesExtendedResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_DowntimesExtendedArray",lazy=False)(pname="downtimesArray", aname="_downtimesArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._downtimesArray = None
                    return
            Holder.__name__ = "Report_GetDowntimesExtendedResponse_Holder"
            self.pyclass = Holder

    class Report_DowntimesExtendedArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_DowntimesExtendedArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.Report_DowntimeExtendedEntry_Def(None, typed=False)
            atype = (u'urn:PingdomAPI', u'Report_DowntimeExtendedEntry[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_DowntimeExtendedEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_DowntimeExtendedEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_DowntimeExtendedEntry_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="from", aname="_from", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="to", aname="_to", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="total_time", aname="_total_time", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="downtimes_duration", aname="_downtimes_duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="unknown_duration", aname="_unknown_duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._to = None
                    self._total_time = None
                    self._downtimes_duration = None
                    self._unknown_duration = None
                    return
            Holder.__name__ = "Report_DowntimeExtendedEntry_Holder"
            self.pyclass = Holder

    class Report_GetOutagesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetOutagesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetOutagesResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_OutagesArray",lazy=False)(pname="outagesArray", aname="_outagesArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._outagesArray = None
                    return
            Holder.__name__ = "Report_GetOutagesResponse_Holder"
            self.pyclass = Holder

    class Report_OutagesArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_OutagesArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.Report_OutageEntry_Def(None, typed=False)
            atype = (u'urn:PingdomAPI', u'Report_OutageEntry[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_OutageEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_OutageEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_OutageEntry_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="from", aname="_from", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="to", aname="_to", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._to = None
                    return
            Holder.__name__ = "Report_OutageEntry_Holder"
            self.pyclass = Holder

    class Location_ListArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Location_ListArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ZSI.TC.String(None, typed=False)
            atype = (u'http://www.w3.org/2001/XMLSchema', u'string[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_ResponseTimesArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_ResponseTimesArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.Report_ResponseTimeEntry_Def(None, typed=False)
            atype = (u'urn:PingdomAPI', u'Report_ResponseTimeEntry[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_ResponseTimeEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_ResponseTimeEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_ResponseTimeEntry_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="from", aname="_from", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="to", aname="_to", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="responseTime", aname="_responseTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._from = None
                    self._to = None
                    self._responseTime = None
                    return
            Holder.__name__ = "Report_ResponseTimeEntry_Holder"
            self.pyclass = Holder

    class Report_GetNotificationsResponseArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetNotificationsResponseArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.Report_GetNotificationsResponseItem_Def(None, typed=False)
            atype = (u'urn:PingdomAPI', u'Report_GetNotificationsResponseItem[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_GetNotificationsResponseItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetNotificationsResponseItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetNotificationsResponseItem_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="notificationTime", aname="_notificationTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="check", aname="_check", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="contact", aname="_contact", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="sentTo", aname="_sentTo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="messageType", aname="_messageType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="messageStatus", aname="_messageStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cause", aname="_cause", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="charged", aname="_charged", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._notificationTime = None
                    self._check = None
                    self._contact = None
                    self._sentTo = None
                    self._messageType = None
                    self._messageStatus = None
                    self._cause = None
                    self._message = None
                    self._charged = None
                    return
            Holder.__name__ = "Report_GetNotificationsResponseItem_Holder"
            self.pyclass = Holder

    class Report_GetRawDataResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetRawDataResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetRawDataResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_RawDataArray",lazy=False)(pname="rawDataArray", aname="_rawDataArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._rawDataArray = None
                    return
            Holder.__name__ = "Report_GetRawDataResponse_Holder"
            self.pyclass = Holder

    class Report_RawDataArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "urn:PingdomAPI"
        type = (schema, "Report_RawDataArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = ns0.Report_RawDataEntry_Def(None, typed=False)
            atype = (u'urn:PingdomAPI', u'Report_RawDataEntry[]')
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

    class Report_RawDataEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_RawDataEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_RawDataEntry_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname="checkTime", aname="_checkTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_CheckState",lazy=False)(pname="checkState", aname="_checkState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="responseTime", aname="_responseTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._checkTime = None
                    self._checkState = None
                    self._responseTime = None
                    self._location = None
                    return
            Holder.__name__ = "Report_RawDataEntry_Holder"
            self.pyclass = Holder

    class Location_GetListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Location_GetListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Location_GetListResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Location_ListArray",lazy=False)(pname="locationsArray", aname="_locationsArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._locationsArray = None
                    return
            Holder.__name__ = "Location_GetListResponse_Holder"
            self.pyclass = Holder

    class Report_GetResponseTimesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetResponseTimesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetResponseTimesResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_ResponseTimesArray",lazy=False)(pname="responseTimesArray", aname="_responseTimesArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._responseTimesArray = None
                    return
            Holder.__name__ = "Report_GetResponseTimesResponse_Holder"
            self.pyclass = Holder

    class Report_GetNotificationsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "Report_GetNotificationsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Report_GetNotificationsResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:PingdomAPI","Report_GetNotificationsResponseArray",lazy=False)(pname="getNotificationsResponseArray", aname="_getNotificationsResponseArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._getNotificationsResponseArray = None
                    return
            Holder.__name__ = "Report_GetNotificationsResponse_Holder"
            self.pyclass = Holder

    class AccountData_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "AccountData")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AccountData_Def.schema
            TClist = [ZSI.TC.String(pname="email", aname="_email", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="firstName", aname="_firstName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastName", aname="_lastName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="company", aname="_company", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="phoneCodeCountry", aname="_phoneCodeCountry", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="phoneNumber", aname="_phoneNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cellPhoneCodeCountry", aname="_cellPhoneCodeCountry", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="cellPhoneNumber", aname="_cellPhoneNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="address", aname="_address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="addressTwo", aname="_addressTwo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="zip", aname="_zip", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="city", aname="_city", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="state", aname="_state", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="countryISO", aname="_countryISO", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._email = None
                    self._firstName = None
                    self._lastName = None
                    self._company = None
                    self._phoneCodeCountry = None
                    self._phoneNumber = None
                    self._cellPhoneCodeCountry = None
                    self._cellPhoneNumber = None
                    self._address = None
                    self._addressTwo = None
                    self._zip = None
                    self._city = None
                    self._state = None
                    self._countryISO = None
                    return
            Holder.__name__ = "AccountData_Holder"
            self.pyclass = Holder

    class AccountType_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "AccountType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CreateAccountResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "urn:PingdomAPI"
        type = (schema, "CreateAccountResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CreateAccountResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    return
            Holder.__name__ = "CreateAccountResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:PingdomAPI)
