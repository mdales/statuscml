################################################## 
# PingdomAPI_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from PingdomAPI_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI

# Locator
class PingdomAPILocator:
    PingdomAPISoapPort_address = "https://ws.pingdom.com/soap/"
    def getPingdomAPISoapPortAddress(self):
        return PingdomAPILocator.PingdomAPISoapPort_address
    def getPingdomAPISoapPort(self, url=None, **kw):
        return PingdomAPISoapBindingSOAP(url or PingdomAPILocator.PingdomAPISoapPort_address, **kw)

# Methods
class PingdomAPISoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: Test_echo
    def Test_echo(self, request):
        if isinstance(request, echo_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Test_echo", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=echo_response.typecode.ofwhat, pyclass=echo_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Auth_login
    def Auth_login(self, request):
        if isinstance(request, login_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Auth_login", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=login_response.typecode.ofwhat, pyclass=login_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Auth_logout
    def Auth_logout(self, request):
        if isinstance(request, logout_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Auth_logout", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=logout_response.typecode.ofwhat, pyclass=logout_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Check_getList
    def Check_getList(self, request):
        if isinstance(request, get_check_names_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Check_getList", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_check_names_response.typecode.ofwhat, pyclass=get_check_names_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Check_getCheckIdsByNames
    def Check_getCheckIdsByNames(self, request):
        if isinstance(request, get_check_ids_by_names_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Check_getCheckIdsByNames", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_check_ids_by_names_response.typecode.ofwhat, pyclass=get_check_ids_by_names_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Report_getLastDowns
    def Report_getLastDowns(self, request):
        if isinstance(request, get_last_downs_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Report_getLastDowns", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_last_downs_response.typecode.ofwhat, pyclass=get_last_downs_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Report_getCurrentStates
    def Report_getCurrentStates(self, request):
        if isinstance(request, get_current_states_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Report_getCurrentStates", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_current_states_response.typecode.ofwhat, pyclass=get_current_states_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Report_getDowntimes
    def Report_getDowntimes(self, request):
        if isinstance(request, get_downtimes_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Report_getDowntimes", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_downtimes_response.typecode.ofwhat, pyclass=get_downtimes_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Report_getDowntimesExtended
    def Report_getDowntimesExtended(self, request):
        if isinstance(request, get_downtimes_extended_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Report_getDowntimesExtended", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_downtimes_extended_response.typecode.ofwhat, pyclass=get_downtimes_extended_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Report_getOutages
    def Report_getOutages(self, request):
        if isinstance(request, get_outages_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Report_getOutages", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_outages_response.typecode.ofwhat, pyclass=get_outages_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Report_getRawData
    def Report_getRawData(self, request):
        if isinstance(request, get_raw_data_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Report_getRawData", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_raw_data_response.typecode.ofwhat, pyclass=get_raw_data_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Location_getList
    def Location_getList(self, request):
        if isinstance(request, get_locations_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Location_getList", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_locations_response.typecode.ofwhat, pyclass=get_locations_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Report_getResponseTimes
    def Report_getResponseTimes(self, request):
        if isinstance(request, get_response_times_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Report_getResponseTimes", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_response_times_response.typecode.ofwhat, pyclass=get_response_times_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: Report_getNotifications
    def Report_getNotifications(self, request):
        if isinstance(request, get_notifications_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#Report_getNotifications", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=get_notifications_response.typecode.ofwhat, pyclass=get_notifications_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

    # op: createAccount
    def createAccount(self, request):
        if isinstance(request, create_account_input) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="urn:methods#createAccount", encodingStyle="http://schemas.xmlsoap.org/soap/encoding/", **kw)
        # no output wsaction
        typecode = Struct(pname=None, ofwhat=create_account_response.typecode.ofwhat, pyclass=create_account_response.typecode.pyclass)
        response = self.binding.Receive(typecode)
        return response

class echo_input:
    def __init__(self):
        self._inString = None
        return
echo_input.typecode = Struct(pname=("urn:methods","Test_echo"), ofwhat=[ZSI.TC.String(pname="inString", aname="_inString", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=echo_input, encoded="urn:methods")

class echo_response:
    def __init__(self):
        self._return = None
        return
echo_response.typecode = Struct(pname=("urn:methods","Test_echoResponse"), ofwhat=[ns0.Test_EchoResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=echo_response, encoded="urn:methods")

class login_input:
    def __init__(self):
        self._APIKey = None
        self._credentialsData = None
        return
login_input.typecode = Struct(pname=("urn:methods","Auth_login"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.Auth_CredentialsData_Def(pname="credentialsData", aname="_credentialsData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=login_input, encoded="urn:methods")

class login_response:
    def __init__(self):
        self._return = None
        return
login_response.typecode = Struct(pname=("urn:methods","Auth_loginResponse"), ofwhat=[ns0.Auth_LoginResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=login_response, encoded="urn:methods")

class logout_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        return
logout_input.typecode = Struct(pname=("urn:methods","Auth_logout"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=logout_input, encoded="urn:methods")

class logout_response:
    def __init__(self):
        self._return = None
        return
logout_response.typecode = Struct(pname=("urn:methods","Auth_logoutResponse"), ofwhat=[ns0.Auth_LogoutResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=logout_response, encoded="urn:methods")

class get_check_names_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        return
get_check_names_input.typecode = Struct(pname=("urn:methods","Check_getList"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_check_names_input, encoded="urn:methods")

class get_check_names_response:
    def __init__(self):
        self._return = None
        return
get_check_names_response.typecode = Struct(pname=("urn:methods","Check_getListResponse"), ofwhat=[ns0.Check_GetListResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_check_names_response, encoded="urn:methods")

class get_check_ids_by_names_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        self._getCheckIdsByNamesRequest = None
        return
get_check_ids_by_names_input.typecode = Struct(pname=("urn:methods","Check_getCheckIdsByNames"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.Check_GetCheckIdsByNamesRequest_Def(pname="getCheckIdsByNamesRequest", aname="_getCheckIdsByNamesRequest", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_check_ids_by_names_input, encoded="urn:methods")

class get_check_ids_by_names_response:
    def __init__(self):
        self._return = None
        return
get_check_ids_by_names_response.typecode = Struct(pname=("urn:methods","Check_getCheckIdsByNamesResponse"), ofwhat=[ns0.Check_GetCheckIdsByNamesResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_check_ids_by_names_response, encoded="urn:methods")

class get_last_downs_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        return
get_last_downs_input.typecode = Struct(pname=("urn:methods","Report_getLastDowns"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_last_downs_input, encoded="urn:methods")

class get_last_downs_response:
    def __init__(self):
        self._return = None
        return
get_last_downs_response.typecode = Struct(pname=("urn:methods","Report_getLastDownsResponse"), ofwhat=[ns0.Report_GetLastDownsResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_last_downs_response, encoded="urn:methods")

class get_current_states_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        return
get_current_states_input.typecode = Struct(pname=("urn:methods","Report_getCurrentStates"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_current_states_input, encoded="urn:methods")

class get_current_states_response:
    def __init__(self):
        self._return = None
        return
get_current_states_response.typecode = Struct(pname=("urn:methods","Report_getCurrentStatesResponse"), ofwhat=[ns0.Report_GetCurrentStatesResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_current_states_response, encoded="urn:methods")

class get_downtimes_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        self._getDowntimesRequest = None
        return
get_downtimes_input.typecode = Struct(pname=("urn:methods","Report_getDowntimes"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.Report_GetDowntimesRequest_Def(pname="getDowntimesRequest", aname="_getDowntimesRequest", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_downtimes_input, encoded="urn:methods")

class get_downtimes_response:
    def __init__(self):
        self._return = None
        return
get_downtimes_response.typecode = Struct(pname=("urn:methods","Report_getDowntimesResponse"), ofwhat=[ns0.Report_GetDowntimesResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_downtimes_response, encoded="urn:methods")

class get_downtimes_extended_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        self._getDowntimesRequest = None
        return
get_downtimes_extended_input.typecode = Struct(pname=("urn:methods","Report_getDowntimesExtended"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.Report_GetDowntimesRequest_Def(pname="getDowntimesRequest", aname="_getDowntimesRequest", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_downtimes_extended_input, encoded="urn:methods")

class get_downtimes_extended_response:
    def __init__(self):
        self._return = None
        return
get_downtimes_extended_response.typecode = Struct(pname=("urn:methods","Report_getDowntimesExtendedResponse"), ofwhat=[ns0.Report_GetDowntimesExtendedResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_downtimes_extended_response, encoded="urn:methods")

class get_outages_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        self._getOutagesRequest = None
        return
get_outages_input.typecode = Struct(pname=("urn:methods","Report_getOutages"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.Report_GetOutagesRequest_Def(pname="getOutagesRequest", aname="_getOutagesRequest", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_outages_input, encoded="urn:methods")

class get_outages_response:
    def __init__(self):
        self._return = None
        return
get_outages_response.typecode = Struct(pname=("urn:methods","Report_getOutagesResponse"), ofwhat=[ns0.Report_GetOutagesResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_outages_response, encoded="urn:methods")

class get_raw_data_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        self._getRawDataRequest = None
        return
get_raw_data_input.typecode = Struct(pname=("urn:methods","Report_getRawData"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.Report_GetRawDataRequest_Def(pname="getRawDataRequest", aname="_getRawDataRequest", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_raw_data_input, encoded="urn:methods")

class get_raw_data_response:
    def __init__(self):
        self._return = None
        return
get_raw_data_response.typecode = Struct(pname=("urn:methods","Report_getRawDataResponse"), ofwhat=[ns0.Report_GetRawDataResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_raw_data_response, encoded="urn:methods")

class get_locations_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        return
get_locations_input.typecode = Struct(pname=("urn:methods","Location_getList"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_locations_input, encoded="urn:methods")

class get_locations_response:
    def __init__(self):
        self._return = None
        return
get_locations_response.typecode = Struct(pname=("urn:methods","Location_getListResponse"), ofwhat=[ns0.Location_GetListResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_locations_response, encoded="urn:methods")

class get_response_times_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        self._getResponseTimesRequest = None
        return
get_response_times_input.typecode = Struct(pname=("urn:methods","Report_getResponseTimes"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.Report_GetResponseTimesRequest_Def(pname="getResponseTimesRequest", aname="_getResponseTimesRequest", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_response_times_input, encoded="urn:methods")

class get_response_times_response:
    def __init__(self):
        self._return = None
        return
get_response_times_response.typecode = Struct(pname=("urn:methods","Report_getResponseTimesResponse"), ofwhat=[ns0.Report_GetResponseTimesResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_response_times_response, encoded="urn:methods")

class get_notifications_input:
    def __init__(self):
        self._APIKey = None
        self._sessionId = None
        self._getNotificationsRequest = None
        return
get_notifications_input.typecode = Struct(pname=("urn:methods","Report_getNotifications"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="sessionId", aname="_sessionId", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.Report_GetNotificationsRequest_Def(pname="getNotificationsRequest", aname="_getNotificationsRequest", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_notifications_input, encoded="urn:methods")

class get_notifications_response:
    def __init__(self):
        self._return = None
        return
get_notifications_response.typecode = Struct(pname=("urn:methods","Report_getNotificationsResponse"), ofwhat=[ns0.Report_GetNotificationsResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=get_notifications_response, encoded="urn:methods")

class create_account_input:
    def __init__(self):
        self._APIKey = None
        self._accountData = None
        self._accountType = None
        return
create_account_input.typecode = Struct(pname=("urn:methods","createAccount"), ofwhat=[ZSI.TC.String(pname="APIKey", aname="_APIKey", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.AccountData_Def(pname="accountData", aname="_accountData", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.AccountType_Def(pname="accountType", aname="_accountType", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=create_account_input, encoded="urn:methods")

class create_account_response:
    def __init__(self):
        self._return = None
        return
create_account_response.typecode = Struct(pname=("urn:methods","createAccountResponse"), ofwhat=[ns0.CreateAccountResponse_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=create_account_response, encoded="urn:methods")
